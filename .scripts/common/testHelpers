#!/bin/bash
. $(dirname $(readlink -f "${BASH_SOURCE[0]}"))/logger
compile(){
  TEST_CFLAGS_GENERAL="-ggdb -Wall -Wextra -pedantic -std=c99 -x c -march=native"
  TEST_CFLAGS_RELAXED="${TEST_CFLAGS_GENERAL}"
#gcc-8  TEST_CFLAGS_SANITIZED="-fsanitize=address -fsanitize=pointer-subtract -fsanitize=pointer-compare -fsanitize=undefined -fsanitize-undefined-trap-on-error -fsanitize-address-use-after-scope -fsanitize=pointer-overflow -fsanitize=enum -fsanitize=bounds-strict -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fsanitize=signed-integer-overflow -fsanitize=return -fsanitize=null -fsanitize=integer-divide-by-zero -fsanitize=shift -ftrapv -O2"

  #gcc-5
  TEST_CFLAGS_SANITIZED="-fsanitize=undefined -fno-sanitize=bounds -fsanitize-undefined-trap-on-error -fcheck-pointer-bounds -mmpx -ftrapv -O2 -fno-sanitize-recover"


  TEST_CFLAGS_STRICT="${TEST_CFLAGS_GENERAL} -Werror -Wno-error=sign-compare"
  local sources=$(find $TEST_SRCDIR -name '*.c' ! -path "*/$TEST_TMPDIR/*" )
  local exitCode=0
  local cc=${CC:-gcc}
  if $cc ${TEST_CFLAGS_RELAXED} -o $1 $sources 2>compile.log ; then
    if $cc ${TEST_CFLAGS_STRICT} ${TEST_CFLAGS_SANITIZED} -o $1 $sources 2>compile.log ; then
      true
    else
      exitCode=$?
      logError "Failed to compile with strict checks for release"
    fi
  else
    exitCode=$?
    logError "Failed to compile"
  fi
  unset cc
  export ASAN_OPTIONS=detect_invalid_pointer_pairs=2
  return $exitCode
}

runBinary() {
  local duration=5
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    duration="$1"
    shift
  fi
  timeout --preserve-status --kill-after=10 --signal=TERM $duration $*
}

runTestCase() {
    local expected=$1
    shift
    local out=std.out
    local err=std.err
    rm -f $out $err
    local exitCode=0
    runBinary $TEST_BINARY $* > $out 2>$err || exitCode=$?
    if [[ $exitCode != 0 ]] ; then head -n 20 $err || true ; return $exitCode; fi
    [ -s $out ] && ${TASKNAME}_postcheck $out && ((TESTSTEP+=1)) # && logOk "step $TESTSTEP finished"
    local quoted_args="${*//.\//}"
    diff -d $expected $out 1> "$quoted_args.diff" 2>&1 \
      ||  { logError "Unexpected result for args: $quoted_args" ; head -n 5 "$quoted_args.diff" ; return 200 ; }
}


