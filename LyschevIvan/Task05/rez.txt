Count: | 5 | 10|100| 1k | 10к| 100k|  1M|  10M|100M|
-------|---|---|---|----|----|-----|----|-----|----|
Alg:   |   |   |   |    |    |     |    |     |    |
-------|---|---|---|----|----|-----|----|-----|----|
Bubble |0.0|0.0|0.0|0.02|0.92|94.03| n/a| n/a | n/a|
-------|---|---|---|----|----|-----|----|-----|----|
Insert |0.0|0.0|0.0|0.01|0.23|31.12| n/a| n/a | n/a|
-------|---|---|---|----|----|-----|----|-----|----|
Merge  |0.0|0.0|0.0| 0.0| 0.0| 0.06|0.86|10.54| n/a|
-------|---|---|---|----|----|-----|----|-----|----|
Quick  |0.0|0.0|0.0|0.02|0.01| 0.05|0.67| 9.62| n/a|
-------|---|---|---|----|----|-----|----|-----|----|
Heap   |0.0|0.0|0.0| 0.0|0.01| 0.07|1.51|22.90| n/a|
-------|---|---|---|----|----|-----|----|-----|----|

Для тестов использовались случайно сгенерированные строки длиной он 5и до 25и знаков.

При сортировке меньше чем 10 тысяч строк, разница не заметна.
С увеличением входных данных, становится заметно отставание алгоритмов со сложностью O(n^2)(bubble, insertion)
и преимущество со сложностью O(n*log(n)) (merge, quick, heap).
При этом так же проявляется зависимость от количества выделяемой памяти для алгоритма, 
например, при 10 миллионах строк, quick sort более чем в 2 раза быстрее heap sort.



